"""Stub file for custom_components/reflex_antd/antd/input.py"""
# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import Any, Callable, Dict, Literal, Optional, Union, overload
from reflex.vars import Var, BaseVar
from reflex.event import EventHandler, EventSpec
from reflex.style import Style
from typing import Optional, Union, Dict, Any
from reflex import Var, Component
from ..base import AntdComponent, ContainVar, JsValue

class Input(AntdComponent):
    def get_event_triggers(self) -> Dict[str, Any]: ...
    @overload
    @classmethod
    def create(  # type: ignore  # type: ignore  # type: ignore  # type: ignore  # type: ignore  # type: ignore
        cls,
        *children,
        addon_after: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        addon_before: Optional[
            Union[Var[Union[Component, str]], str, Component]
        ] = None,
        allow_clear: Optional[
            Union[Var[Union[ContainVar, bool]], bool, ContainVar]
        ] = None,
        count: Optional[Union[Var[Union[ContainVar, Dict]], Dict, ContainVar]] = None,
        default_value: Optional[Union[Var[str], str]] = None,
        disabled: Optional[Union[Var[bool], bool]] = None,
        id: Optional[Union[Var[str], str]] = None,
        max_length: Optional[Union[Var[int], int]] = None,
        prefix: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        show_count: Optional[Union[Var[Union[JsValue, bool]], bool, JsValue]] = None,
        status: Optional[
            Union[
                Var[
                    Literal[
                        "default",
                        "success",
                        "error",
                        "warning",
                        "info",
                        "exception",
                        "normal",
                        "active",
                    ]
                ],
                Literal[
                    "default",
                    "success",
                    "error",
                    "warning",
                    "info",
                    "exception",
                    "normal",
                    "active",
                ],
            ]
        ] = None,
        size: Optional[
            Union[
                Var[Literal["default", "small", "medium", "middle", "large"]],
                Literal["default", "small", "medium", "middle", "large"],
            ]
        ] = None,
        suffix: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        type: Optional[Union[Var[str], str]] = None,
        value: Optional[Union[Var[str], str]] = None,
        variant: Optional[
            Union[
                Var[Literal["outlined", "borderless", "filled"]],
                Literal["outlined", "borderless", "filled"],
            ]
        ] = None,
        placeholder: Optional[Union[Var[str], str]] = None,
        _custom_components: Optional[Set[CustomComponent]] = None,
        _ex_hooks: Optional[List[ContainVar]] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[Var, str]]] = None,
        on_blur: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_change: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_context_menu: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_double_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_focus: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mount: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_down: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_up: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_press_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_scroll: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_unmount: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        **props,
    ) -> "Input":
        """Create the component.

        Args:
            *children: The children of the component.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class TextArea(Input):
    @overload
    @classmethod
    def create(  # type: ignore  # type: ignore  # type: ignore  # type: ignore  # type: ignore  # type: ignore
        cls,
        *children,
        auto_size: Optional[Union[Var[Union[Dict, bool]], bool, Dict]] = None,
        addon_after: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        addon_before: Optional[
            Union[Var[Union[Component, str]], str, Component]
        ] = None,
        allow_clear: Optional[
            Union[Var[Union[ContainVar, bool]], bool, ContainVar]
        ] = None,
        count: Optional[Union[Var[Union[ContainVar, Dict]], Dict, ContainVar]] = None,
        default_value: Optional[Union[Var[str], str]] = None,
        disabled: Optional[Union[Var[bool], bool]] = None,
        id: Optional[Union[Var[str], str]] = None,
        max_length: Optional[Union[Var[int], int]] = None,
        prefix: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        show_count: Optional[Union[Var[Union[JsValue, bool]], bool, JsValue]] = None,
        status: Optional[
            Union[
                Var[
                    Literal[
                        "default",
                        "success",
                        "error",
                        "warning",
                        "info",
                        "exception",
                        "normal",
                        "active",
                    ]
                ],
                Literal[
                    "default",
                    "success",
                    "error",
                    "warning",
                    "info",
                    "exception",
                    "normal",
                    "active",
                ],
            ]
        ] = None,
        size: Optional[
            Union[
                Var[Literal["default", "small", "medium", "middle", "large"]],
                Literal["default", "small", "medium", "middle", "large"],
            ]
        ] = None,
        suffix: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        type: Optional[Union[Var[str], str]] = None,
        value: Optional[Union[Var[str], str]] = None,
        variant: Optional[
            Union[
                Var[Literal["outlined", "borderless", "filled"]],
                Literal["outlined", "borderless", "filled"],
            ]
        ] = None,
        placeholder: Optional[Union[Var[str], str]] = None,
        _custom_components: Optional[Set[CustomComponent]] = None,
        _ex_hooks: Optional[List[ContainVar]] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[Var, str]]] = None,
        on_blur: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_change: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_context_menu: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_double_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_focus: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mount: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_down: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_up: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_press_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_scroll: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_unmount: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        **props,
    ) -> "TextArea":
        """Create the component.

        Args:
            *children: The children of the component.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class Search(Input):
    def get_event_triggers(self) -> Dict[str, Any]: ...
    @overload
    @classmethod
    def create(  # type: ignore  # type: ignore  # type: ignore  # type: ignore  # type: ignore  # type: ignore
        cls,
        *children,
        enter_button: Optional[
            Union[Var[Union[Component, str]], str, Component]
        ] = None,
        loading: Optional[Union[Var[bool], bool]] = None,
        addon_after: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        addon_before: Optional[
            Union[Var[Union[Component, str]], str, Component]
        ] = None,
        allow_clear: Optional[
            Union[Var[Union[ContainVar, bool]], bool, ContainVar]
        ] = None,
        count: Optional[Union[Var[Union[ContainVar, Dict]], Dict, ContainVar]] = None,
        default_value: Optional[Union[Var[str], str]] = None,
        disabled: Optional[Union[Var[bool], bool]] = None,
        id: Optional[Union[Var[str], str]] = None,
        max_length: Optional[Union[Var[int], int]] = None,
        prefix: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        show_count: Optional[Union[Var[Union[JsValue, bool]], bool, JsValue]] = None,
        status: Optional[
            Union[
                Var[
                    Literal[
                        "default",
                        "success",
                        "error",
                        "warning",
                        "info",
                        "exception",
                        "normal",
                        "active",
                    ]
                ],
                Literal[
                    "default",
                    "success",
                    "error",
                    "warning",
                    "info",
                    "exception",
                    "normal",
                    "active",
                ],
            ]
        ] = None,
        size: Optional[
            Union[
                Var[Literal["default", "small", "medium", "middle", "large"]],
                Literal["default", "small", "medium", "middle", "large"],
            ]
        ] = None,
        suffix: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        type: Optional[Union[Var[str], str]] = None,
        value: Optional[Union[Var[str], str]] = None,
        variant: Optional[
            Union[
                Var[Literal["outlined", "borderless", "filled"]],
                Literal["outlined", "borderless", "filled"],
            ]
        ] = None,
        placeholder: Optional[Union[Var[str], str]] = None,
        _custom_components: Optional[Set[CustomComponent]] = None,
        _ex_hooks: Optional[List[ContainVar]] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[Var, str]]] = None,
        on_blur: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_change: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_context_menu: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_double_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_focus: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mount: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_down: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_up: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_press_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_scroll: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_search: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_unmount: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        **props,
    ) -> "Search":
        """Create the component.

        Args:
            *children: The children of the component.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class Password(Input):
    @overload
    @classmethod
    def create(  # type: ignore  # type: ignore  # type: ignore  # type: ignore  # type: ignore  # type: ignore
        cls,
        *children,
        icon_render: Optional[Union[Var[JsValue], JsValue]] = None,
        visibility_toggle: Optional[
            Union[Var[Union[ContainVar, bool]], bool, ContainVar]
        ] = None,
        addon_after: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        addon_before: Optional[
            Union[Var[Union[Component, str]], str, Component]
        ] = None,
        allow_clear: Optional[
            Union[Var[Union[ContainVar, bool]], bool, ContainVar]
        ] = None,
        count: Optional[Union[Var[Union[ContainVar, Dict]], Dict, ContainVar]] = None,
        default_value: Optional[Union[Var[str], str]] = None,
        disabled: Optional[Union[Var[bool], bool]] = None,
        id: Optional[Union[Var[str], str]] = None,
        max_length: Optional[Union[Var[int], int]] = None,
        prefix: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        show_count: Optional[Union[Var[Union[JsValue, bool]], bool, JsValue]] = None,
        status: Optional[
            Union[
                Var[
                    Literal[
                        "default",
                        "success",
                        "error",
                        "warning",
                        "info",
                        "exception",
                        "normal",
                        "active",
                    ]
                ],
                Literal[
                    "default",
                    "success",
                    "error",
                    "warning",
                    "info",
                    "exception",
                    "normal",
                    "active",
                ],
            ]
        ] = None,
        size: Optional[
            Union[
                Var[Literal["default", "small", "medium", "middle", "large"]],
                Literal["default", "small", "medium", "middle", "large"],
            ]
        ] = None,
        suffix: Optional[Union[Var[Union[Component, str]], str, Component]] = None,
        type: Optional[Union[Var[str], str]] = None,
        value: Optional[Union[Var[str], str]] = None,
        variant: Optional[
            Union[
                Var[Literal["outlined", "borderless", "filled"]],
                Literal["outlined", "borderless", "filled"],
            ]
        ] = None,
        placeholder: Optional[Union[Var[str], str]] = None,
        _custom_components: Optional[Set[CustomComponent]] = None,
        _ex_hooks: Optional[List[ContainVar]] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[Var, str]]] = None,
        on_blur: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_change: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_context_menu: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_double_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_focus: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mount: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_down: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_mouse_up: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_press_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_scroll: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        on_unmount: Optional[
            Union[EventHandler, EventSpec, list, Callable, BaseVar]
        ] = None,
        **props,
    ) -> "Password":
        """Create the component.

        Args:
            *children: The children of the component.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

input = Input.create
text_area = TextArea.create
search = Search.create
password = Password.create
